// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ----------- //
// pio_servo //
// ----------- //

#define pio_servo_wrap_target 3
#define pio_servo_wrap 7

static const uint16_t pio_servo_program_instructions[] = {
    0xe000, //  0: set    pins, 0                    
    0x80a0, //  1: pull   block                      
    0x6040, //  2: out    y, 32                      
            //     .wrap_target
    0x80a0, //  3: pull   block                      
    0xa082, //  4: mov    exec, y                    
    0x602f, //  5: out    x, 15                      
    0x0046, //  6: jmp    x--, 6                     
    0xe000, //  7: set    pins, 0                    
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program pio_servo_program = {
    .instructions = pio_servo_program_instructions,
    .length = 8,
    .origin = -1,
};

static inline pio_sm_config pio_servo_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + pio_servo_wrap_target, offset + pio_servo_wrap);
    return c;
}

static inline void pio_servo_program_init(PIO pio, uint sm, uint offset, uint pin, uint pins) {
    pio_sm_config c = pio_servo_program_get_default_config(offset);
    // Map the state machine's OUT pin group to one pin, namely the `pin`
    // parameter to this function.
    sm_config_set_out_pins(&c, pin, pins);
    sm_config_set_set_pins(&c, pin, pins);
    // Set this pin's GPIO function (connect PIO to the pad)
    for (size_t i = 0; i < pins; i++)
        pio_gpio_init(pio, pin+i);
    
    //sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);
    // Set the pin direction to output at the PIO
    pio_sm_set_consecutive_pindirs(pio, sm, pin, pins, true);

    // 4. Set clock divider
    float clock_divider = (float) clock_get_hz(clk_sys) / 1000000;
    sm_config_set_clkdiv(&c, clock_divider);

    // 5. Configure input shift register
    // args: BOOL right_shift, BOOL auto_push, 1..32 push_threshold
    // sm_config_set_out_shift(&c, true, false, 32);    
   // sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_RX);

   
    // Load our configuration, and jump to the start of the program
    pio_sm_init(pio, sm, offset, &c);
    // Set the state machine running
    pio_sm_set_enabled(pio, sm, true);
    auto instr = pio_encode_out(pio_pins, pins);

    pio_sm_put_blocking(pio,sm, instr);
}


#endif
